import asyncio
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ContentType
from config import TOKEN, ADMIN_ID, WEBAPP_URL
from database import get_balance, add_balance, remove_balance, cursor, conn

bot = Bot(TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# ---------- START ----------
@router.message(F.text == "/start")
async def start(msg: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –ö–∞–∑–∏–Ω–æ", web_app=WebAppInfo(url=WEBAPP_URL))],
        [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_balance")],
        [InlineKeyboardButton(text="üíº –ë–∞–ª–∞–Ω—Å", callback_data="check_balance")]
    ])
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StarsCasino!", reply_markup=kb)

# ---------- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ----------
@router.callback_query(F.data == "add_balance")
async def add_balance_handler(callback: CallbackQuery):
    add_balance(callback.from_user.id, 10)
    await callback.message.answer("–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 10 ‚≠ê")

# ---------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ ----------
@router.callback_query(F.data == "check_balance")
async def check_balance(callback: CallbackQuery):
    bal = get_balance(callback.from_user.id)
    await callback.message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bal} ‚≠ê")

# ---------- –ê–¥–º–∏–Ω–∫–∞ ----------
@router.message(F.text == "/admin")
async def admin_menu(msg: Message):
    if msg.from_user.id != ADMIN_ID:
        return await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ üö´")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤", callback_data="edit_gifts")],
        [InlineKeyboardButton(text="üé∞ –†–µ–¥–∞–∫—Ç–æ—Ä –∫–µ–π—Å–æ–≤", callback_data="edit_cases")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ])
    await msg.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

dp.include_router(router)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
