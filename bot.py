import asyncio
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.enums import ContentType
from database import cursor, conn, get_balance, add_balance, remove_balance

TOKEN = "7702115093:AAG33V5LgsgOXnwGAhP5MRmJa1jSj78PUwk"
ADMIN_ID = 5827986904  # —Ç–≤–æ–π ID

bot = Bot(TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# ---------- FSM ----------
class GiftState(StatesGroup):
    name = State()
    emoji = State()
    rarity = State()
    image = State()

class CaseState(StatesGroup):
    name = State()
    price = State()
    image = State()

class CaseGiftState(StatesGroup):
    case_id = State()
    gift_id = State()
    chance = State()

# ---------- START ----------
@router.message(F.text == "/start")
async def start(msg: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –ö–∞–∑–∏–Ω–æ", web_app={"url": "https://rubiknegeroy.github.io/telegram-casino/index.html"})],
        [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance")]
    ])
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StarsCasino!", reply_markup=kb)

# ---------- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ----------
@router.callback_query(F.data == "add_balance")
async def add_balance_handler(callback: CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (‚≠ê):")
    await callback.answer()

@router.message(F.text.regexp(r'^\d+$'))
async def process_balance_input(msg: Message):
    amount = int(msg.text)
    add_balance(msg.from_user.id, amount)
    await msg.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} ‚≠ê")

# ---------- –ë–∞–ª–∞–Ω—Å ----------
@router.message(F.text == "/balance")
async def balance(msg: Message):
    bal = get_balance(msg.from_user.id)
    await msg.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bal} ‚≠ê")

# ---------- –ê–¥–º–∏–Ω–∫–∞ ----------
@router.message(F.text == "/admin")
async def admin_menu(msg: Message):
    if msg.from_user.id != ADMIN_ID:
        return await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ üö´")
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤", callback_data="edit_gifts")],
        [InlineKeyboardButton(text="üé∞ –†–µ–¥–∞–∫—Ç–æ—Ä –∫–µ–π—Å–æ–≤", callback_data="edit_cases")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ])
    await msg.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

# ---------- –ü–æ–¥–∞—Ä–∫–∏ ----------
@router.callback_query(F.data == "edit_gifts")
async def edit_gifts(callback: CallbackQuery):
    cursor.execute("SELECT id, name, emoji, rarity FROM gifts")
    gifts = cursor.fetchall()
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{g[1]} {g[2]} ({g[3]})", callback_data=f"edit_gift_{g[0]}")] for g in gifts
    ] + [[InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data="add_gift")]])
    
    await callback.message.answer("üéÅ –°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤:", reply_markup=kb)

@router.callback_query(F.data == "add_gift")
async def add_gift_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(GiftState.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞:")

@router.message(GiftState.name)
async def add_gift_name(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await state.set_state(GiftState.emoji)
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏ –ø–æ–¥–∞—Ä–∫–∞:")

@router.message(GiftState.emoji)
async def add_gift_emoji(msg: Message, state: FSMContext):
    await state.update_data(emoji=msg.text)
    await state.set_state(GiftState.rarity)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å (–æ–±—ã—á–Ω—ã–π/—Ä–µ–¥–∫–∏–π/–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π):")

@router.message(GiftState.rarity)
async def add_gift_rarity(msg: Message, state: FSMContext):
    await state.update_data(rarity=msg.text)
    await state.set_state(GiftState.image)
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥–∞—Ä–∫–∞:")

@router.message(GiftState.image, F.content_type == ContentType.PHOTO)
async def add_gift_image(msg: Message, state: FSMContext):
    file_id = msg.photo[-1].file_id
    data = await state.get_data()
    
    cursor.execute("INSERT INTO gifts (name, emoji, rarity, image) VALUES (?, ?, ?, ?)",
                   (data["name"], data["emoji"], data["rarity"], file_id))
    conn.commit()
    
    await state.clear()
    await msg.answer("üéÅ –ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")

@router.callback_query(F.data.startswith("edit_gift_"))
async def edit_single_gift(callback: CallbackQuery):
    gift_id = int(callback.data.split("_")[2])
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data=f"delete_gift_{gift_id}")]
    ])
    await callback.message.answer(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ ID {gift_id}:", reply_markup=kb)

@router.callback_query(F.data.startswith("delete_gift_"))
async def delete_gift(callback: CallbackQuery):
    gift_id = int(callback.data.split("_")[2])
    cursor.execute("DELETE FROM gifts WHERE id=?", (gift_id,))
    cursor.execute("DELETE FROM case_gifts WHERE gift_id=?", (gift_id,))
    conn.commit()
    await callback.message.answer("üóë –ü–æ–¥–∞—Ä–æ–∫ —É–¥–∞–ª—ë–Ω ‚úÖ")

# ---------- –ö–µ–π—Å—ã ----------
@router.callback_query(F.data == "edit_cases")
async def edit_cases(callback: CallbackQuery):
    cursor.execute("SELECT id, name, price FROM cases")
    cases = cursor.fetchall()
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{c[1]} ({c[2]} ‚≠ê)", callback_data=f"edit_case_{c[0]}")] for c in cases
    ] + [[InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–µ–π—Å", callback_data="add_case")]])
    
    await callback.message.answer("üé∞ –°–ø–∏—Å–æ–∫ –∫–µ–π—Å–æ–≤:", reply_markup=kb)

@router.callback_query(F.data == "add_case")
async def add_case_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CaseState.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞:")

@router.message(CaseState.name)
async def add_case_name(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await state.set_state(CaseState.price)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫–µ–π—Å–∞ (‚≠ê):")

@router.message(CaseState.price)
async def add_case_price(msg: Message, state: FSMContext):
    await state.update_data(price=int(msg.text))
    await state.set_state(CaseState.image)
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–µ–π—Å–∞:")

@router.message(CaseState.image, F.content_type == ContentType.PHOTO)
async def add_case_image(msg: Message, state: FSMContext):
    file_id = msg.photo[-1].file_id
    data = await state.get_data()
    
    cursor.execute("INSERT INTO cases (name, price, image) VALUES (?, ?, ?)",
                   (data["name"], data["price"], file_id))
    conn.commit()
    
    await state.clear()
    await msg.answer("üé∞ –ö–µ–π—Å –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")

@router.callback_query(F.data.startswith("edit_case_"))
async def edit_single_case(callback: CallbackQuery):
    case_id = int(callback.data.split("_")[2])
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data=f"add_gift_to_case_{case_id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–µ–π—Å", callback_data=f"delete_case_{case_id}")]
    ])
    await callback.message.answer(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞ ID {case_id}:", reply_markup=kb)

@router.callback_query(F.data.startswith("delete_case_"))
async def delete_case(callback: CallbackQuery):
    case_id = int(callback.data.split("_")[2])
    cursor.execute("DELETE FROM cases WHERE id=?", (case_id,))
    cursor.execute("DELETE FROM case_gifts WHERE case_id=?", (case_id,))
    conn.commit()
    await callback.message.answer("üóë –ö–µ–π—Å —É–¥–∞–ª—ë–Ω ‚úÖ")

# ---------- –ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ ----------
@router.callback_query(F.data.startswith("add_gift_to_case_"))
async def add_gift_to_case(callback: CallbackQuery, state: FSMContext):
    case_id = int(callback.data.split("_")[4])
    await state.update_data(case_id=case_id)

    cursor.execute("SELECT id, name FROM gifts")
    gifts = cursor.fetchall()
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{g[1]}", callback_data=f"select_gift_{g[0]}")] for g in gifts
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=kb)

@router.callback_query(F.data.startswith("select_gift_"))
async def select_gift_for_case(callback: CallbackQuery, state: FSMContext):
    gift_id = int(callback.data.split("_")[2])
    await state.update_data(gift_id=gift_id)
    await state.set_state(CaseGiftState.chance)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è (–≤ %):")

@router.message(CaseGiftState.chance)
async def save_gift_chance(msg: Message, state: FSMContext):
    data = await state.get_data()
    chance = int(msg.text)

    cursor.execute("INSERT INTO case_gifts (case_id, gift_id, chance) VALUES (?, ?, ?)",
                   (data["case_id"], data["gift_id"], chance))
    conn.commit()

    await state.clear()
    await msg.answer("üéÅ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–µ–π—Å ‚úÖ")

# ---------- –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä ----------
dp.include_router(router)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
